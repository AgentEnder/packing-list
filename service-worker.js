import{a as i}from"./chunks/chunk-pSdIku02.js";const o="1.0.0",a=`packing-list-cache-v${o}`,c=`packing-list-static-v${o}`,l=["/","/login","/trips","/settings","/people","/days","/packing-list"],s={static:[/\.js$/,/\.css$/,/\.woff2?$/,/\.png$/,/\.jpg$/,/\.svg$/,/\.ico$/],api:[/\/api\//,/\/version.*$/],noCache:[/\/api\/version$.*/,/\/version(\?.*)?$/]};self.addEventListener("install",e=>{console.log("üîß Service Worker: Installing..."),e.waitUntil(Promise.all([caches.open(c).then(t=>(console.log("üì¶ Service Worker: Pre-caching static assets"),t.addAll(l))),self.skipWaiting()]))});self.addEventListener("activate",e=>{console.log("üöÄ Service Worker: Activating..."),e.waitUntil(Promise.all([caches.keys().then(t=>Promise.all(t.map(r=>{if(r!==a&&r!==c)return console.log("üóëÔ∏è Service Worker: Deleting old cache:",r),caches.delete(r)}))),self.clients.claim()]))});self.addEventListener("fetch",e=>{const{request:t}=e,r=new URL(t.url);if(!r.protocol.startsWith("http"))return;if(t.mode==="navigate"){console.log("üöÄ Service Worker: Skipping navigation request to preserve client-side routing:",t.url);return}const n=f(r);e.respondWith(h(t,n))});function f(e){const t=e.pathname;return s.noCache.some(r=>r.test(t))?"no-cache":s.static.some(r=>r.test(t))?"cache-first":(s.api.some(r=>r.test(t)),"network-first")}async function h(e,t){const r=await caches.open(a);switch(t){case"cache-first":return u(e,r);case"network-first":return d(e,r);case"no-cache":return p(e);default:return fetch(e)}}async function u(e,t){try{const r=await t.match(e);if(r)return r;const n=await fetch(e);return n.ok&&e.method==="GET"&&t.put(e,n.clone()),n}catch(r){throw console.warn("‚ö†Ô∏è Service Worker: Cache-first failed for:",e.url,r),e.mode==="navigate"&&console.warn("‚ö†Ô∏è Service Worker: Unexpected navigation request in cache-first handler"),r}}async function d(e,t){try{const r=await fetch(e);return r.ok&&e.method==="GET"&&t.put(e,r.clone()),r}catch(r){console.warn("‚ö†Ô∏è Service Worker: Network failed for:",e.url,r);const n=await t.match(e);if(n)return n;throw e.mode==="navigate"&&console.warn("‚ö†Ô∏è Service Worker: Unexpected navigation request in network-first handler"),r}}async function p(e){try{const t=await fetch(e),r=new Headers(t.headers);return r.set("Cache-Control","no-cache, no-store, must-revalidate"),r.set("Pragma","no-cache"),r.set("Expires","0"),new Response(t.body,{status:t.status,statusText:t.statusText,headers:r})}catch(t){throw console.warn("‚ö†Ô∏è Service Worker: No-cache request failed:",e.url,t),t}}self.addEventListener("message",e=>{e.data&&e.data.type==="CHECK_VERSION"&&g().then(t=>{e.ports[0].postMessage(t)})});async function g(){try{const e=new AbortController,t=setTimeout(()=>e.abort(),5e3),r=await fetch(i("/packing-list","/api/version.json"),{cache:"no-cache",signal:e.signal,headers:{"Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache"}});if(clearTimeout(t),!r.ok)return console.warn(`‚ö†Ô∏è Service Worker: Version endpoint returned ${r.status}`),{success:!1,error:`HTTP ${r.status}`,offline:r.status>=500||r.status===0};const n=await r.json();return console.log("‚úÖ Service Worker: Version check successful"),{success:!0,version:n}}catch(e){const t=e instanceof Error?e.message:String(e);return e instanceof Error&&(e.name==="AbortError"||e.message.includes("fetch")||e.message.includes("network")||e.message.includes("Failed to fetch"))?(console.warn("üì° Service Worker: Version check failed - likely offline:",t),{success:!1,error:t,offline:!0}):(console.warn("‚ö†Ô∏è Service Worker: Version check failed:",e),{success:!1,error:t,offline:!1})}}console.log("‚úÖ Service Worker: Loaded and ready");
