import{ak as R,al as y,am as T,an as D,ao as H,ap as O,aq as A,ar as Y,as as $}from"./chunk-Bwb-TI-m.js";import"./chunk-pSdIku02.js";function h(r,s){const a=s.get(r.ruleId||""),i=a?a.name:r.name;return{id:r.id,name:r.name,itemName:i,ruleId:r.ruleId||"imported",ruleHash:r.ruleHash||"",isPacked:r.packed,isOverridden:!1,dayIndex:r.dayIndex,personId:r.personId,personName:void 0,notes:r.notes,dayStart:void 0,dayEnd:void 0,isExtra:!1,quantity:r.quantity,categoryId:r.category,subcategoryId:void 0}}async function x(r){console.log("🔄 [HYDRATION] Loading offline state for user:",r);const s={trips:{summaries:[],selectedTripId:null,byId:{}},userPreferences:null,userPeople:{people:[],isLoading:!1,error:null,hasTriedToLoad:!0}};if(!r||r==="undefined"||r==="null")return console.error("❌ [HYDRATION] Invalid userId provided:",r),console.log("🔄 [HYDRATION] Returning empty state due to invalid userId"),s;console.log("🔄 [HYDRATION] Calling TripStorage.getUserTripSummaries with userId:",r);try{let a=null;try{a=await R.getPreferences(),a?(s.userPreferences=a,console.log("✅ [HYDRATION] Loaded user preferences:",a)):console.log("📋 [HYDRATION] No user preferences found")}catch(o){console.error("❌ [HYDRATION] Error loading user preferences:",o)}try{const o=await y.getAllUserPeople(r);o.length>0?(s.userPeople.people=o,console.log(`✅ [HYDRATION] Loaded ${o.length} user people for ${r}`)):console.log(`📋 [HYDRATION] No user people found for ${r}`)}catch(o){console.error("❌ [HYDRATION] Error loading user people:",o)}const i=await T.getUserTripSummaries(r);if(console.log("🔄 [HYDRATION] Got summaries from TripStorage:",i.length,i.map(o=>({tripId:o.tripId,title:o.title}))),s.trips.summaries=i,i.length>0){const o=a?.lastSelectedTripId;(o?i.some(c=>c.tripId===o):!1)&&o?(s.trips.selectedTripId=o,console.log("🎯 [HYDRATION] Restored last selected trip:",o)):(s.trips.selectedTripId=i[0].tripId,console.log("🔄 [HYDRATION] Selected first trip:",i[0].tripId,i[0].title))}else console.log("🔄 [HYDRATION] No trips found, selectedTripId remains null");console.log(`🔄 [HYDRATION] Found ${i.length} trip summaries for user`);for(const o of i){console.log(`📁 [HYDRATION] Loading trip data for: ${o.tripId}`);try{const e=await T.getTrip(o.tripId);if(!e){console.warn(`⚠️ [HYDRATION] Trip not found in storage: ${o.tripId}`);continue}e.userId!==r&&console.warn(`⚠️ [HYDRATION] Trip userId mismatch: expected "${r}", got "${e.userId}" for trip ${e.id}`),console.log(`📋 [HYDRATION] Trip loaded from IndexedDB: ${e.title} (${e.id}) userId: ${e.userId}`);const c=await D.getTripPeople(e.id),I=await H.getTripItems(e.id),g=await O.getTripRulesWithDetails(e.id);console.log(`📋 [HYDRATION] Loaded ${g.length} default item rules for trip ${e.id}`);const n=A(e.id);console.log(`👥 [HYDRATION] Loaded ${c.length} people for trip ${e.id}`),console.log(`📦 [HYDRATION] Loaded ${I.length} items for trip ${e.id}`),n.trip={...e,defaultItemRules:g},n.people=c,n.lastSynced=e.lastSyncedAt;const m={trips:{summaries:[],selectedTripId:e.id,byId:{[e.id]:n}}};console.log(`🔄 [HYDRATION] Calculating packing list for trip ${e.id}`);const d=Y($(m)).trips.byId[e.id];if(!d){console.error(`❌ [HYDRATION] Failed to calculate packing list for trip ${e.id}`),s.trips.byId[e.id]=n;continue}const N=new Map(g.map(t=>[t.id,t])),u=I.map(t=>h(t,N));console.log(`📦 [HYDRATION] Preserving packed status for ${u.length} stored items against ${d.calculated.packingListItems.length} calculated items`);const f=d.calculated.packingListItems.map(t=>{let p=u.find(l=>l.ruleId===t.ruleId&&l.ruleHash===t.ruleHash&&l.dayIndex===t.dayIndex&&l.personId===t.personId);return p||(p=u.find(l=>l.itemName===t.itemName&&l.dayIndex===t.dayIndex&&l.personId===t.personId&&l.quantity===t.quantity)),p?(console.log(`🔄 [HYDRATION] Preserved packed status for ${t.itemName}: ${p.isPacked}`),{...t,isPacked:p.isPacked}):t});d.calculated.packingListItems=f,s.trips.byId[e.id]=d,console.log(`✅ [HYDRATION] Trip ${e.id} ready for Redux state with ${f.filter(t=>t.isPacked).length} packed items`)}catch(e){console.error(`❌ [HYDRATION] Error loading trip ${o.tripId}:`,e)}}console.log(`🎯 [HYDRATION] Successfully loaded ${Object.keys(s.trips.byId).length} trips into state - ready to update Redux`)}catch(a){console.error("❌ [HYDRATION] Error loading offline state:",a)}return s}export{x as loadOfflineState};
